{"version":3,"sources":["components/Controls/Buttonmaintheme.jsx","components/Form.jsx","components/Todo.jsx","components/Todolist.jsx","App.js","index.js"],"names":["ButtonMainTheme","buttonText","theme","setTheme","className","onClick","Form","inputValue","setInputValue","taskList","setTaskList","onChange","e","target","value","type","placeholder","maxLength","trim","text","id","uuid","done","document","querySelector","focus","preventDefault","Todo","taskObject","map","item","filter","TodoList","App","useState","useEffect","localTaskList","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eec30172.chunk.js","sourcesContent":["export default function ButtonMainTheme({ buttonText, theme, setTheme }) {\r\n  const handleColorTheme = () => {\r\n    // create ternary operator in order to have a css class\r\n    // on App.js div that will take the value of the state variable: theme\r\n    setTheme(\r\n      theme === \"App-main_theme-light\"\r\n        ? \"App-main_theme-dark\"\r\n        : \"App-main_theme-light\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <button className=\"App-main__Btn\" onClick={handleColorTheme}>\r\n      {buttonText}\r\n    </button>\r\n  );\r\n}\r\n","import { v4 as uuid } from \"uuid\"; // unique id, see https://www.npmjs.com/package/uuid\r\n\r\n// component: Form\r\nexport default function Form({\r\n  inputValue,\r\n  setInputValue,\r\n  taskList,\r\n  setTaskList,\r\n}) {\r\n  // function will run everytime the input changes: to get input value 'onChange' of our input-field\r\n  const handleInputOnChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  // function to handle what happens 'onClick' of submit button\r\n  const handleSubmit = (e) => {\r\n    if (inputValue.trim()) {\r\n      setTaskList([\r\n        // spread-operator (preserve/pass existing data of array)\r\n        ...taskList,\r\n\r\n        // CREATE an OBJECT - each object will be added to our array []:\r\n        {\r\n          text: inputValue.trim(),\r\n          id: uuid(),\r\n          done: false,\r\n        },\r\n      ]);\r\n    }\r\n    document.querySelector(\".Form__input\").focus();\r\n    setInputValue(\"\"); // on submit, after object is created, (re)set input value to empty string\r\n    e.preventDefault(); // function to prevent from Reload\r\n  };\r\n\r\n  return (\r\n    // JSX-section of our component\r\n    // To render our form, ' import Form '  and add  ' <Form /> ' to our App.js\r\n    // In the following input-form we only CALL our functions from ABOVE\r\n\r\n    <form className=\"Form__input-form App-main__vertical\">\r\n      <input\r\n        onChange={handleInputOnChange}\r\n        type=\"text\"\r\n        className=\"Form__input\"\r\n        value={inputValue}\r\n        placeholder=\"Please enter your new task.\"\r\n        maxLength=\"80\"\r\n      />\r\n      <button onClick={handleSubmit} type=\"submit\" className=\"Form__btn\">\r\n        <i className=\"fas fa-plus\"></i>\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","// component: Todo\r\n// This component is our list-element that will be rendered in the TodoList <ul>\r\n// Each Todo can be edited, deleted, marked as done\r\n\r\nexport default function Todo({ text, setTaskList, taskList, taskObject }) {\r\n  const handleEditingTask = (e) => {\r\n    setTaskList(\r\n      // 'loop' through\r\n      taskList.map((item) => {\r\n        if (item.id === taskObject.id) {\r\n          return {\r\n            ...item,\r\n            text: e.target.value,\r\n          };\r\n        }\r\n        return item; // in case, condition doesn't match, return item as it is\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCheckBtn = () => {\r\n    setTaskList(\r\n      taskList.map((item) => {\r\n        if (item.id === taskObject.id) {\r\n          return {\r\n            ...item,\r\n            done: !item.done,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    setTaskList(taskList.filter((item) => item.id !== taskObject.id));\r\n  };\r\n\r\n  return (\r\n    <div className=\"Todo__div\">\r\n      <li className={`Todo__li-element `}>\r\n        <input\r\n          // based on value of done, add class to existing class or do nothing\r\n          className={`Todo__input ${\r\n            taskObject.done ? \"Todo__line-through\" : \"\"\r\n          }`}\r\n          type=\"text\"\r\n          maxLength=\"80\"\r\n          value={text}\r\n          onChange={handleEditingTask}\r\n        />\r\n      </li>\r\n      <button onClick={handleCheckBtn} className=\"Todo__btn Todo__btn-check\">\r\n        <i // based on value of done, change class for corresponding icon\r\n          className={` ${taskObject.done ? \"fas fa-plus\" : \"fas fa-check\"}`}\r\n        ></i>\r\n      </button>\r\n      <button onClick={handleDelete} className=\"Todo__btn Todo__btn-trash\">\r\n        <i className=\"far fa-trash-alt\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import Todo from \"./Todo\";\r\n\r\n// TodoList component\r\nexport default function TodoList({ taskList, setTaskList }) {\r\n  return (\r\n    // inside the ul we want to render our Todo component\r\n    // * notice: https://reactjs.org/docs/lists-and-keys.html\r\n\r\n    <ul className=\"TodoList__ul App-main__vertical\">\r\n      {taskList.map((taskObject) => (\r\n        <Todo\r\n          taskObject={taskObject}\r\n          setTaskList={setTaskList}\r\n          taskList={taskList}\r\n          text={taskObject.text}\r\n          key={taskObject.id}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport ButtonMainTheme from \"./components/Controls/Buttonmaintheme\";\r\nimport Form from \"./components/Form\";\r\nimport TodoList from \"./components/Todolist\";\r\n\r\nexport default function App() {\r\n  // In [ ] of our useState contain the following state-variables:\r\n  // first: holds the actual value, second: is a function/method to change the actual value\r\n  // In ( ) of our useState we pass the initial state/value, that can be any Javascript data type\r\n  let [inputValue, setInputValue] = useState(\"\"); // initial state is an empty string\r\n  let [taskList, setTaskList] = useState([]); // initial state is an empty array\r\n  let [theme, setTheme] = useState(\"App-main_theme-light\");\r\n\r\n  useEffect(() => {\r\n    let localTaskList = JSON.parse(\r\n      localStorage.getItem(\"localStorage-TaskList\") || []\r\n    );\r\n    setTaskList(localTaskList);\r\n  }, []); // dependencyArray, remember:\r\n  // if empty --> only runs ONCE, when component is rendered initially\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"localStorage-TaskList\", JSON.stringify(taskList));\r\n  }, [taskList]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main className={`App-main ${theme}`}>\r\n        <h1>ReactTodo </h1>\r\n        <ButtonMainTheme\r\n          buttonText={`Change to ${\r\n            theme === \"App-main_theme-light\" ? \"dark-\" : \"light-\"\r\n          }Theme`}\r\n          theme={theme}\r\n          setTheme={setTheme}\r\n        />\r\n        <Form\r\n          inputValue={inputValue}\r\n          setInputValue={setInputValue}\r\n          taskList={taskList}\r\n          setTaskList={setTaskList}\r\n        />\r\n        <TodoList taskList={taskList} setTaskList={setTaskList} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}